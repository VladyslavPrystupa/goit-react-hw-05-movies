{"version":3,"file":"static/js/67.0ec6db78.chunk.js","mappings":"mMAEaA,EAAe,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACvBC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,wBACGF,EAAKG,KAAI,gBAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,GAAV,OACR,yBACE,SAAC,KAAD,CACEC,UAAU,aACVC,GAAE,kBAAaF,GACfG,MAAO,CAAEC,KAAMR,GAHjB,SAKGG,KANIC,EADD,KAaf,C,iGCpBYK,EAAY,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAoB1B,OACE,6BACE,kBAAMA,SAAUA,EAAhB,WACE,mBAAQC,KAAK,SAAb,qBACA,kBACEA,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,gBACZC,KAAK,mBAOd,E,mCCUD,EAvCe,WACb,OAA4CC,EAAAA,EAAAA,UAAS,IAArD,eAAOC,EAAP,KAAuBC,EAAvB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA4BL,EAAAA,EAAAA,WAAS,GAArC,eAAOM,EAAP,KAAeC,EAAf,KAEMC,GAAYC,EAAAA,EAAAA,UAChB,kCAAML,EAAaM,IAAI,gBAAvB,QAAmC,EAAnC,GACA,CAACN,KAGHO,EAAAA,EAAAA,YAAU,WACRJ,GAAU,IACVK,EAAAA,EAAAA,IAAmBJ,GAChBK,MAAK,SAAAC,GAAI,OAAIZ,EAAkBY,EAAtB,IACTC,OAAM,SAAAC,GAAK,OAAIC,MAAMD,EAAV,IACXE,QAAQX,GAAU,GACtB,GAAE,CAACC,IAcJ,OACE,4BACE,SAACf,EAAD,CAAWC,SAdE,SAAAyB,GACfA,EAAEC,iBACF,IAAQC,EAAUF,EAAEG,cAAcC,SAASC,WAAnCH,MAGR,GAFAF,EAAEG,cAAcG,QAEF,KAAVJ,EAEF,OADAhB,EAAgB,CAAC,GACVY,MAAM,oBAEfZ,EAAgB,CAAEqB,MAAOL,GAC1B,IAKIf,IAAU,SAACqB,EAAA,EAAD,KACX,SAAC7C,EAAA,EAAD,CAAcC,KAAMkB,MAGzB,C,8LC1CK2B,EAAW,gCACXC,EAAM,mCAECC,EAAa,mCAAG,oGACJC,EAAAA,EAAAA,IAAA,UAAaH,EAAb,sBAA2C,CAChEI,OAAQ,CACNC,QAASJ,KAHc,cACrBK,EADqB,yBAOpBA,EAASpB,KAAKqB,SAPM,2CAAH,qDAUbvB,EAAkB,mCAAG,WAAMc,GAAN,uFACTK,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iCACeC,EADf,kBAC4BH,IAFnB,cAC1BQ,EAD0B,yBAKzBA,EAASpB,KAAKqB,SALW,2CAAH,sDAQlBC,EAAY,mCAAG,WAAMhD,GAAN,uFACH2C,EAAAA,EAAAA,IAAA,UAAaH,EAAb,kBAA+BxC,GAAM,CAC1D4C,OAAQ,CACNC,QAASJ,KAHa,cACpBK,EADoB,yBAOnBA,EAASpB,MAPU,2CAAH,sDAUZuB,EAAY,mCAAG,WAAMjD,GAAN,uFACH2C,EAAAA,EAAAA,IAAA,UAAaH,EAAb,kBAA+BxC,EAA/B,YAA6C,CAClE4C,OAAQ,CACNC,QAASJ,KAHa,cACpBK,EADoB,yBAOnBA,EAASpB,KAAKqB,SAPK,2CAAH,sDAUZG,EAAS,mCAAG,WAAMlD,GAAN,uFACA2C,EAAAA,EAAAA,IAAA,UAAaH,EAAb,kBAA+BxC,EAA/B,YAA6C,CAClE4C,OAAQ,CACNC,QAASJ,KAHU,cACjBK,EADiB,yBAOhBA,EAASpB,KAAKyB,MAPE,2CAAH,qD","sources":["components/ListOfMovies.jsx","components/Searchbar.jsx","pages/Movies.jsx","services/api.js"],"sourcesContent":["import { Link, useLocation } from 'react-router-dom';\n\nexport const ListOfMovies = ({ list }) => {\n  const location = useLocation();\n\n  return (\n    <ul>\n      {list.map(({ title, id }) => (\n        <li key={id}>\n          <Link\n            className=\"item-movie\"\n            to={`/movies/${id}`}\n            state={{ from: location }}\n          >\n            {title}\n          </Link>\n        </li>\n      ))}\n    </ul>\n  );\n};\n","export const Searchbar = ({ onSubmit }) => {\n  // const [searcValue, setSearcValue] = useState('');\n\n  // const handleChange = evt => {\n  //   const { value } = evt.target;\n\n  //   setSearcValue(value);\n  // };\n\n  // const reset = () => {\n  //   setSearcValue('');\n  // };\n\n  // const handleSubmit = evt => {\n  //   evt.preventDefault();\n\n  //   onSearch(searcValue);\n\n  //   reset();\n  // };\n  return (\n    <header>\n      <form onSubmit={onSubmit}>\n        <button type=\"submit\">search</button>\n        <input\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search movies\"\n          name=\"searcValue\"\n          // value={searcValue}\n          // onChange={handleChange}\n        />\n      </form>\n    </header>\n  );\n};\n","import { ListOfMovies } from 'components/ListOfMovies';\nimport { Searchbar } from 'components/Searchbar';\nimport { useEffect, useState, useMemo } from 'react';\nimport { fetchMoviesByQuery } from 'services/api';\nimport { useSearchParams } from 'react-router-dom';\nimport { Loader } from 'components/Loader';\n\nconst Movies = () => {\n  const [searchedMovies, setSearchedMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [loader, setLoader] = useState(false);\n\n  const memoQuery = useMemo(\n    () => searchParams.get('query') ?? '',\n    [searchParams]\n  );\n\n  useEffect(() => {\n    setLoader(true);\n    fetchMoviesByQuery(memoQuery)\n      .then(data => setSearchedMovies(data))\n      .catch(error => alert(error))\n      .finally(setLoader(false));\n  }, [memoQuery]);\n\n  const onSubmit = e => {\n    e.preventDefault();\n    const { value } = e.currentTarget.elements.searcValue;\n    e.currentTarget.reset();\n\n    if (value === '') {\n      setSearchParams({});\n      return alert('Enter movie name');\n    }\n    setSearchParams({ query: value });\n  };\n\n  return (\n    <div>\n      <Searchbar onSubmit={onSubmit} />\n      {loader && <Loader />}\n      <ListOfMovies list={searchedMovies} />\n    </div>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst KEY = 'd03712107dcdd723f1173c5ee2c0d8c1';\n\nexport const fetchTrending = async () => {\n  const response = await axios.get(`${BASE_URL}trending/movie/day`, {\n    params: {\n      api_key: KEY,\n    },\n  });\n\n  return response.data.results;\n};\n\nexport const fetchMoviesByQuery = async query => {\n  const response = await axios.get(\n    `${BASE_URL}/search/movie?api_key=${KEY}&query=${query}`\n  );\n\n  return response.data.results;\n};\n\nexport const fetchMovieId = async id => {\n  const response = await axios.get(`${BASE_URL}/movie/${id}`, {\n    params: {\n      api_key: KEY,\n    },\n  });\n\n  return response.data;\n};\n\nexport const fetchReviews = async id => {\n  const response = await axios.get(`${BASE_URL}/movie/${id}/reviews`, {\n    params: {\n      api_key: KEY,\n    },\n  });\n\n  return response.data.results;\n};\n\nexport const fetchCast = async id => {\n  const response = await axios.get(`${BASE_URL}/movie/${id}/credits`, {\n    params: {\n      api_key: KEY,\n    },\n  });\n\n  return response.data.cast;\n};\n"],"names":["ListOfMovies","list","location","useLocation","map","title","id","className","to","state","from","Searchbar","onSubmit","type","autoComplete","autoFocus","placeholder","name","useState","searchedMovies","setSearchedMovies","useSearchParams","searchParams","setSearchParams","loader","setLoader","memoQuery","useMemo","get","useEffect","fetchMoviesByQuery","then","data","catch","error","alert","finally","e","preventDefault","value","currentTarget","elements","searcValue","reset","query","Loader","BASE_URL","KEY","fetchTrending","axios","params","api_key","response","results","fetchMovieId","fetchReviews","fetchCast","cast"],"sourceRoot":""}